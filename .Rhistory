sessionInfo
sessionInfo()
version
q()
q()
q()
q()
ls()
# Load required libraries
library(SingleCellExperiment)
install.packages("singleCellExperiment")
library(slingshot)
install.packages("slingshot")
library(scater)
install.packages("scater")
# Load required libraries
library(SingleCellExperiment)
library(slingshot)
library(scater)
BiocManager::install("SingleCellExperiment")
install.packages("BiocManager")
install.packages("BiocManager")
BiocManager::install("SingleCellExperiment")
load(BiocManager)
library(BiocManager)
updateR()
library(installr)
updateR()
BiocManager::install("SingleCellExperiment")
version()
q()
library(installr)
updateR()
q()
q()
ls()
library(SingleCellExperiment)
library(slingshot)
library(scater)
library(Seurat)
library(Rcpp)
sessionInfo()
# Convert Seurat object to SingleCellExperiment object
plus = readRDS("data/seurat_object2")
setwd("~/GitHub/direct-conversion")
library(SingleCellExperiment)
library(slingshot)
library(scater)
library(Seurat)
library(Rcpp)
sessionInfo()
# Convert Seurat object to SingleCellExperiment object
plus = readRDS("data/seurat_object2")
str(plus, max.level = 2)
# counts 데이터 추출 및 병합
counts_shCtrl <- plus[["RNA"]]$counts.shCtrl
counts_shPTBP1 <- plus[["RNA"]]$counts.shPTBP1
counts <- cbind(counts_shCtrl, counts_shPTBP1)
# data (normalized) 데이터 추출 및 병합
data_shCtrl <- plus[["RNA"]]$data.shCtrl
data_shPTBP1 <- plus[["RNA"]]$data.shPTBP1
data <- cbind(data_shCtrl, data_shPTBP1)
# SingleCellExperiment 객체 생성
sce <- SingleCellExperiment(
assays = list(
counts = counts,
logcounts = data
),
colData = plus@meta.data,
reducedDims = list(
PCA = Embeddings(plus, "pca"),
UMAP = Embeddings(plus, "umap")
)
)
# 활성 식별자 추가
sce$cell_type <- plus@active.ident
# scaling
sce <- logNormCounts(sce)  # 로그 정규화 (이미 수행되었다면 건너뛰기)
sce <- scater::runPCA(sce, exprs_values = "logcounts")  # PCA 실행
# Run Slingshot with specified start and end clusters
# 클러스터 레이블 업데이트 함수
update_cluster_labels <- function(label) {
if (label %in% c("GABAergic neurons", "Glutamatergic neurons")) {
return("Neurons")
} else {
return(label)
}
}
# SingleCellExperiment 객체의 클러스터 레이블 업데이트
sce$updated_customclassif <- sapply(sce$customclassif, update_cluster_labels)
# 업데이트된 고유 클러스터 확인
unique_clusters <- unique(sce$updated_customclassif)
# Slingshot 실행 (업데이트된 레이블 사용)
sds <- slingshot(sce, clusterLabels = 'updated_customclassif', reducedDim = 'UMAP',
start.clus = "Fibroblasts",
end.clus = c("Neurons", "Myofibroblasts", "Immature neurons"))
# 궤적 그리기
# UMAP 좌표 추출
umap_coords <- reducedDims(sce)$UMAP
# 데이터 프레임 생성
plot_data <- data.frame(
UMAP1 = umap_coords[,1],
UMAP2 = umap_coords[,2],
CellType = sce$updated_customclassif
)
# 색상 정의
library(RColorBrewer)
cell_colors <- brewer.pal(4, "Pastel1")
# 궤적 색상 정의
trajectory_colors <- c("red", "green", "blue")
# ggplot으로 그리기
p <- ggplot(plot_data, aes(x = UMAP1, y = UMAP2, color = CellType)) +
geom_point(size = 0.5, alpha = 0.6) +
scale_color_manual(values = cell_colors) +
theme_minimal() +
labs(title = "Cell Types with Trajectories") +
theme(
legend.text = element_text(size = 14),
legend.title = element_text(size = 14)
) +
guides(color = guide_legend(override.aes = list(size = 6)))
# 궤적 추가
for (i in seq_along(slingCurves(sds))) {
curve_data <- slingCurves(sds)[[i]]$s[slingCurves(sds)[[i]]$ord, ]
# 종착점 클러스터 찾기
end_cluster <- slingLineages(sds)[[i]][length(slingLineages(sds)[[i]])]
# 종착점 클러스터의 중심점 찾기
end_cluster_cells <- which(sce$updated_customclassif == end_cluster)
end_point <- colMeans(umap_coords[end_cluster_cells,])
# 종착점까지의 거리 계산
distances <- sqrt(rowSums((curve_data - matrix(end_point, nrow = nrow(curve_data), ncol = 2, byrow = TRUE))^2))
# 종착점에 가장 가까운 점 찾기
closest_point <- which.min(distances)
# 종착점까지의 궤적만 그리기
p <- p + geom_path(data = data.frame(UMAP1 = curve_data[1:closest_point,1],
UMAP2 = curve_data[1:closest_point,2]),
aes(x = UMAP1, y = UMAP2),
color = trajectory_colors[i],
linewidth = 1,
alpha = 0.7)
}
p
ggsave("20240719_trajectory_umap_plot.png", plot = p, width = 7, height = 6, dpi = 1000)
# load packages
library(ggplot2)
library(dplyr)
library(tidyr)
set.seed(123) # 결과 재현을 위해 시드 설정
# plot_data 데이터 프레임 생성
pseudotime <- as.data.frame(slingPseudotime(sds))
plot_data <- data.frame(
Cell = rownames(pseudotime),
Cluster = sce$updated_customclassif
)
# 강제 lineage 할당
plot_data$Lineage <- NA
# 각 클러스터에 대해 강제로 lineage 할당
plot_data$Lineage[plot_data$Cluster == "Myofibroblasts"] <- "Lineage1"
plot_data$Lineage[plot_data$Cluster == "Immature neurons"] <- "Lineage2"
plot_data$Lineage[plot_data$Cluster == "Neurons"] <- "Lineage3"
# Fibroblast는 Lineage1, Lineage2, Lineage3 중 무작위로 할당
fibroblast_indices <- which(plot_data$Cluster == "Fibroblasts")
plot_data$Lineage[fibroblast_indices] <- sample(c("Lineage1", "Lineage2", "Lineage3"), length(fibroblast_indices), replace = TRUE)
# 할당된 lineage와 pseudotime 결합
plot_data <- cbind(plot_data, pseudotime)
library(reshape2)
# Pseudotime 데이터를 long 형식으로 변환
plot_data_long <- melt(plot_data, id.vars = c("Cell", "Cluster"), variable.name = "Lineage", value.name = "Pseudotime")
head(plot_data_long)
# plot_data 데이터 프레임 생성
pseudotime <- as.data.frame(slingPseudotime(sds))
head(pseudotime)
plot_data <- data.frame(
Cell = rownames(pseudotime),
Cluster = sce$updated_customclassif
)
head(plot_data)
# 강제 lineage 할당
plot_data$Lineage <- NA
# 각 클러스터에 대해 강제로 lineage 할당
plot_data$Lineage[plot_data$Cluster == "Myofibroblasts"] <- "Lineage1"
plot_data$Lineage[plot_data$Cluster == "Immature neurons"] <- "Lineage2"
plot_data$Lineage[plot_data$Cluster == "Neurons"] <- "Lineage3"
# Fibroblast는 Lineage1, Lineage2, Lineage3 중 무작위로 할당
fibroblast_indices <- which(plot_data$Cluster == "Fibroblasts")
plot_data$Lineage[fibroblast_indices] <- sample(c("Lineage1", "Lineage2", "Lineage3"), length(fibroblast_indices), replace = TRUE)
head(plot_data)
# plot_data 데이터 프레임 생성
pseudotime <- as.data.frame(slingPseudotime(sds))
plot_data <- data.frame(
Cell = rownames(pseudotime),
Cluster = sce$updated_customclassif,
Pseudotime = pseudotime
)
head(plot_data)
# 강제 lineage 할당
plot_data$Lineage <- NA
head(plot_data)
# 각 클러스터에 대해 강제로 lineage 할당
plot_data <- plot_data %>%
mutate(Lineage = case_when(
Cluster == "Myofibroblasts" ~ "Lineage1",
Cluster == "Immature neurons" ~ "Lineage2",
Cluster == "Neurons" ~ "Lineage3",
Cluster == "Fibroblast" ~ sample(c("Lineage1", "Lineage2", "Lineage3"), 1)
))
# Pseudotime 데이터를 long 형식으로 변환
plot_data_long <- melt(plot_data, id.vars = c("Cell", "Cluster", "Lineage"), variable.name = "PseudotimeVar", value.name = "Pseudotime")
# 필요한 Lineage 열만 남기기
plot_data_long <- plot_data_long %>% filter(PseudotimeVar %in% c("Lineage1", "Lineage2", "Lineage3"))
head(plot_data_long)
# Pseudotime 데이터를 long 형식으로 변환
plot_data_long <- melt(plot_data, id.vars = c("Cell", "Cluster", "Lineage"), variable.name = "PseudotimeVar", value.name = "Pseudotime")
head(plot_data_long)
# plot_data 데이터 프레임 생성
pseudotime <- as.data.frame(slingPseudotime(sds))
plot_data <- data.frame(
Cell = rownames(pseudotime),
Cluster = sce$updated_customclassif,
Pseudotime = pseudotime
)
# 강제 lineage 할당
plot_data$Lineage <- NA
# 각 클러스터에 대해 강제로 lineage 할당
plot_data <- plot_data %>%
mutate(Lineage = case_when(
Cluster == "Myofibroblasts" ~ "Lineage1",
Cluster == "Immature neurons" ~ "Lineage2",
Cluster == "Neurons" ~ "Lineage3",
Cluster == "Fibroblast" ~ sample(c("Lineage1", "Lineage2", "Lineage3"), 1)
))
# Pseudotime 데이터를 long 형식으로 변환
plot_data_long <- melt(plot_data, id.vars = c("Cell", "Cluster", "Lineage"), variable.name = "PseudotimeVar", value.name = "Pseudotime")
head(plot_data_long)
head(plot_data)
# plot_data 데이터 프레임 생성
pseudotime <- as.data.frame(slingPseudotime(sds))
plot_data <- data.frame(
Cell = rownames(pseudotime),
Cluster = sce$updated_customclassif,
Pseudotime = pseudotime
)
# 강제 lineage 할당
plot_data$Lineage <- NA
# 각 클러스터에 대해 강제로 lineage 할당
plot_data <- plot_data %>%
mutate(Lineage = case_when(
Cluster == "Myofibroblasts" ~ "Lineage1",
Cluster == "Immature neurons" ~ "Lineage2",
Cluster == "Neurons" ~ "Lineage3",
Cluster == "Fibroblast" ~ sample(c("Lineage1", "Lineage2", "Lineage3"), 1)
))
head(plot_data)
pseudotime <- as.data.frame(slingPseudotime(sds))
plot_data <- data.frame(
Cell = rownames(pseudotime),
Cluster = sce$updated_customclassif,
Pseudotime = pseudotime
)
# 강제 lineage 할당
plot_data$Lineage <- NA
# 각 클러스터에 대해 강제로 lineage 할당
plot_data <- plot_data %>%
mutate(Lineage = case_when(
Cluster == "Myofibroblasts" ~ "Lineage1",
Cluster == "Immature neurons" ~ "Lineage2",
Cluster == "Neurons" ~ "Lineage3",
Cluster == "Fibroblasts" ~ sample(c("Lineage1", "Lineage2", "Lineage3"), 1)
))
head(plot_data)
# Pseudotime 컬럼 추가 및 값 할당
plot_data <- plot_data %>%
mutate(Pseudotime = case_when(
Lineage == "Lineage1" ~ Pseudotime.Lineage1,
Lineage == "Lineage2" ~ Pseudotime.Lineage2,
Lineage == "Lineage3" ~ Pseudotime.Lineage3
))
head(plot_data)
# plot_data_long 생성
plot_data_long <- plot_data %>%
select(Cell, Cluster, Lineage, Pseudotime)
# Pseudotime에 따른 클러스터 분포 시각화
ggplot(plot_data_long, aes(x = Pseudotime, y = Cluster, fill = Cluster)) +
geom_violin(scale = "width", adjust = 1.5) +
facet_wrap(~ Lineage, scales = "free_y") +
labs(title = "Pseudotime vs Cluster", x = "Pseudotime", y = "Cluster") +
theme_minimal() +
theme(axis.text.y = element_text(angle = 45, hjust = 1))
table(plot_data$Cluster, plot_data$Lineage)
sample(c("Lineage1", "Lineage2", "Lineage3"), 1)
sample(c("Lineage1", "Lineage2", "Lineage3"), 1)
sample(c("Lineage1", "Lineage2", "Lineage3"), 1)
pseudotime <- as.data.frame(slingPseudotime(sds))
plot_data <- data.frame(
Cell = rownames(pseudotime),
Cluster = sce$updated_customclassif,
Pseudotime = pseudotime
)
# 강제 lineage 할당
plot_data$Lineage <- NA
plot_data <- plot_data %>%
mutate(Lineage = case_when(
Cluster == "Myofibroblasts" ~ "Lineage1",
Cluster == "Immature neurons" ~ "Lineage2",
Cluster == "Neurons" ~ "Lineage3",
Cluster == "Fibroblasts" ~ sample(c("Lineage1", "Lineage2", "Lineage3"), n(), replace = T)
))
table(plot_data$Cluster, plot_data$Lineage)
# Pseudotime 컬럼 추가 및 값 할당
plot_data <- plot_data %>%
mutate(Pseudotime = case_when(
Lineage == "Lineage1" ~ Pseudotime.Lineage1,
Lineage == "Lineage2" ~ Pseudotime.Lineage2,
Lineage == "Lineage3" ~ Pseudotime.Lineage3
))
# plot_data_long 생성
plot_data_long <- plot_data %>%
select(Cell, Cluster, Lineage, Pseudotime)
# Pseudotime에 따른 클러스터 분포 시각화
ggplot(plot_data_long, aes(x = Pseudotime, y = Cluster, fill = Cluster)) +
geom_violin(scale = "width", adjust = 1.5) +
facet_wrap(~ Lineage, scales = "free_y") +
labs(title = "Pseudotime vs Cluster", x = "Pseudotime", y = "Cluster") +
theme_minimal() +
theme(axis.text.y = element_text(angle = 45, hjust = 1))
# Pseudotime에 따른 클러스터 분포 시각화
ggplot(plot_data_long, aes(x = Pseudotime, y = Cluster, fill = Cluster)) +
geom_violin(scale = "width", adjust = 1.5) +
#  facet_wrap(~ Lineage, scales = "free_y") +
labs(title = "Pseudotime vs Cluster", x = "Pseudotime", y = "Cluster") +
theme_minimal() +
theme(axis.text.y = element_text(angle = 45, hjust = 1))
q()
