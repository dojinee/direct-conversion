sessionInfo
sessionInfo()
version
q()
q()
q()
q()
setwd("~/GitHub/direct-conversion")
load("preprocessing.RData")
ls()
plus <- merge(shCtrl, shPTBP1, add.cell.ids = c("shCtrl","shPTBP1"), project = "both")
dim(plus)
dim(shPTBP1)
plus[1:5,1:5]
# QC and selecting cells
plus[["percent.mt"]] = PercentageFeatureSet(plus, pattern = "^MT.")
library(Seurat)
library(patchwork)
# QC and selecting cells
plus[["percent.mt"]] = PercentageFeatureSet(plus, pattern = "^MT.")
head(plus@meta.data)
tail(plus@meta.data)
VlnPlot(plus,
features = c("nFeature_RNA", "nCount_RNA", "percent.mt"),
ncol = 3)
# filter cells : feature counts >1000 & <4000,  < 20% mitochondrial counts
plus <- subset(plus, subset = nFeature_RNA > 1000 & nFeature_RNA < 4000 & percent.mt < 20)
VlnPlot(plus,
features = c("nFeature_RNA", "nCount_RNA", "percent.mt"),
ncol = 3)
# Normalizing the data
plus <- NormalizeData(plus, normalization.method = "LogNormalize", scale.factor = 10000)
VlnPlot(plus,
features = c("nFeature_RNA", "nCount_RNA", "percent.mt"),
ncol = 3)
# scaling the data
plus <- ScaleData(plus)
VlnPlot(plus,
features = c("nFeature_RNA", "nCount_RNA", "percent.mt"),
ncol = 3)
plus
head(plus@assays$RNA)
head(plus@assays$RNA@features)
head(plus@assays$RNA@cells)
head(plus@assays$RNA@layers)
head(plus@assays$RNA@layers$scale.data)
plus@assays$RNA@layers$scale.data[1:5, 1:5]
dim(plus@assays$RNA@layers$scale.data)
mean(plus@assays$RNA@layers$scale.data[1,])
sd(plus@assays$RNA@layers$scale.data[1,])
# linear dimensional reduction
plus <- RunPCA(plus, features = VariableFeatures(object = plus))
# linear dimensional reduction
plus <- RunPCA(plus, features = VariableFeatures(object = plus))
DimPlot(plus, reduction = "pca")
plus <- merge(shCtrl, shPTBP1, add.cell.ids = c("shCtrl","shPTBP1"), project = "both")
# QC and selecting cells
plus[["percent.mt"]] = PercentageFeatureSet(plus, pattern = "^MT.")
# filter cells : feature counts >1000 & <4000,  < 20% mitochondrial counts
plus <- subset(plus, subset = nFeature_RNA > 1000 & nFeature_RNA < 4000 & percent.mt < 20)
# Normalizing the data
plus_normalized <- NormalizeData(plus, normalization.method = "LogNormalize", scale.factor = 10000)
# find variable features
plus2 <- FindVariableFeatures(plus_normalized, selection.method = "vst", nfeatures = 2000)
# scaling the data
plus_scaled <- ScaleData(plus2)
# linear dimensional reduction
plus_reduced <- RunPCA(plus_scaled, features = VariableFeatures(object = plus_scaled))
DimPlot(plus_reduced, reduction = "pca")
# cluster the cells
plus_reduced <- FindNeighbors(plus_reduced, dims = 1:10)
plus_reduced <- FindClusters(plus_reduced, resolution = 0.2)
# Run non-linear dimensional reduction (UMAP)
plus_reduced <- RunUMAP(plus_reduced, dims = 1:10)
# linear dimensional reduction
plus_reduced <- RunPCA(plus_scaled, features = VariableFeatures(object = plus_scaled))
# cluster the cells
plus_reduced <- FindNeighbors(plus_reduced, dims = 1:10)
plus_reduced <- FindClusters(plus_reduced, resolution = 0.2)
# Run non-linear dimensional reduction (UMAP)
plus_umap <- RunUMAP(plus_reduced, dims = 1:10)
DimPlot(plus_umap, reduction = "umap")
DimPlot(plus_umap, split.by = "orig.ident", reduction = "umap")
# save RDS
saveRDS(plus_umap, "seurat_object")
save.image("preprocessing.RData")
ls()
rm()
ls()
rm(*)
rm(plus, plus2, plus_normalized, plus_reduced, plus_scaled, plus_umap)
ls()
# save RDS
saveRDS(plus_umap, "data/seurat_object")
plus <- merge(shCtrl, shPTBP1, add.cell.ids = c("shCtrl","shPTBP1"), project = "both")
# QC and selecting cells
plus[["percent.mt"]] = PercentageFeatureSet(plus, pattern = "^MT.")
# filter cells : feature counts >1000 & <4000,  < 20% mitochondrial counts
plus <- subset(plus, subset = nFeature_RNA > 1000 & nFeature_RNA < 4000 & percent.mt < 20)
# Normalizing the data
plus_normalized <- NormalizeData(plus, normalization.method = "LogNormalize", scale.factor = 10000)
# find variable features
plus2 <- FindVariableFeatures(plus_normalized, selection.method = "vst", nfeatures = 2000)
# scaling the data
plus_scaled <- ScaleData(plus2)
# linear dimensional reduction
plus_reduced <- RunPCA(plus_scaled, features = VariableFeatures(object = plus_scaled))
# cluster the cells
plus_reduced <- FindNeighbors(plus_reduced, dims = 1:10)
plus_reduced <- FindClusters(plus_reduced, resolution = 0.2)
# Run non-linear dimensional reduction (UMAP)
plus_umap <- RunUMAP(plus_reduced, dims = 1:10)
# save RDS
saveRDS(plus_umap, "data/seurat_object")
save.image("data/preprocessing.RData")
q()
