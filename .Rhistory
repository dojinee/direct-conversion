# GMT 파일 경로 설정
gmt_file_path <- "D:/seodojin/Rworld/hsapiens.GO_BP.name.gmt"
# GMT 파일 읽기
gmt_data <- read.delim(gmt_file_path, sep="\t", header=FALSE, stringsAsFactors=FALSE)
# 첫 몇 줄 확인
head(gmt_data)
# 각 유전자 셋을 리스트의 요소로 저장
gene_sets_list <- apply(gmt_data, 1, function(x) {
genes <- x[3:length(x)]  # 첫 두 컬럼은 제외하고 유전자만 추출
genes <- genes[genes != ""]  # 빈 문자열 제거
list(name=x[1], description=x[2], genes=genes)
})
# 리스트 확인
print(gene_sets_list)
library(parallel)
# 유전자 셋의 genes 필드를 character 벡터로 변환하여 리스트에 저장
gene_sets_sets <- lapply(gene_sets_list, function(x) as.character(x$genes))
library(foreach)
library(doParallel)
library(doParallel)
numCores <- detectCores() * 0.8  # 사용할 코어의 80% 사용
cl <- makeCluster(round(numCores))
registerDoParallel(cl)
overlap_matrix <- matrix(0, nrow = length(gene_sets_sets), ncol = length(gene_sets_sets))
results <- foreach(i = seq_along(gene_sets_sets), .combine='cbind', .packages='methods') %dopar% {
temp_results <- integer(length(gene_sets_sets) - i)  # 결과를 저장할 임시 벡터
for (j in (i+1):length(gene_sets_sets)) {
temp_results[j-i] <- length(intersect(gene_sets_sets[[i]], gene_sets_sets[[j]]))
}
temp_results
}
stopCluster(cl)
# 결과 행렬에 결과 적용
for (i in 1:(length(gene_sets_sets)-1)) {
overlap_matrix[i, (i+1):length(gene_sets_sets)] <- results[[i]]
overlap_matrix[(i+1):length(gene_sets_sets), i] <- results[[i]]
}
results <- foreach(i = 1:length(gene_sets_sets), .combine='cbind', .packages='methods') %dopar% {
tryCatch({
sapply(i+1:length(gene_sets_sets), function(j) {
length(intersect(gene_sets_sets[[i]], gene_sets_sets[[j]]))
})
}, error = function(e) {
cat("Error in iteration", i, ": ", e$message, "\n")  # 오류 메시지 출력
rep(NA, length(gene_sets_sets) - i)  # 오류가 발생하면 NA로 채워진 벡터 반환
})
}
# hash 패키지 설치
if (!requireNamespace("hash", quietly = TRUE)) {
install.packages("hash")
}
library(hash)
# 각 유전자 셋을 hash로 변환하여 저장
gene_sets_hash <- lapply(gene_sets_list, function(x) {
hash::hash(keys=x$genes, values=rep(TRUE, length(x$genes)))
})
# 중복 계산
overlap_matrix <- matrix(0, nrow = length(gene_sets_hash), ncol = length(gene_sets_hash))
rownames(overlap_matrix) <- sapply(gene_sets_list, function(x) x$name)
colnames(overlap_matrix) <- sapply(gene_sets_list, function(x) x$name)
for (i in 1:length(gene_sets_hash)) {
for (j in i:length(gene_sets_hash)) {
if (i != j) {
overlap_size <- length(intersect(keys(gene_sets_hash[[i]]), keys(gene_sets_hash[[j]])))
overlap_matrix[i, j] <- overlap_size
overlap_matrix[j, i] <- overlap_size
}
}
}
# 중복 행렬 확인
print(overlap_matrix)
install.packages("igraph")
library(igraph)
library(ggraph)
library(ggplot2)
# 중복 행렬을 기반으로 그래프 생성
g <- graph_from_adjacency_matrix(overlap_matrix, weighted=TRUE, mode="undirected", diag=FALSE)
# 유전자 셋 이름을 노드 이름으로 설정
V(g)$name <- rownames(overlap_matrix)
# 엣지 가중치에 따라 노드 연결 (중복 수가 0인 연결은 제거)
E(g) <- E(g)[weight > 0]
# 1 중복 행렬을 이용한 네트워크 생성에서 임계값 적용
threshold <- 5  # 예를 들어, 중복 개수가 5 이상인 경우만 연결
g <- graph_from_adjacency_matrix(overlap_matrix > threshold, weighted=TRUE, mode="undirected", diag=FALSE)
# 3 더 간단한 레이아웃 사용
ggraph(g, layout = "circle") +
geom_edge_link(aes(width = weight), alpha = 0.5) +
geom_node_point(color = "dodgerblue", size = 5) +
geom_node_text(aes(label = name), vjust = 1.8, size = 5) +
theme_void()
# 4 간소화된 시각화
ggraph(g, layout = "fr") +
geom_edge_link(aes(width = weight), color="gray", alpha = 0.5) +
geom_node_point(color = "blue", size = 4) +
theme_minimal()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("topGO")
BiocManager::install("biomaRt")
nBiocManager::install("org.Hs.eg.db")
BiocManager::install("org.Hs.eg.db")
library(topGO)
library(biomaRt)
library(org.Hs.eg.db)
install.packages("DBI")
install.packages("DBI")
library(DBI)
library(AnnotationDbi)
# biomaRt 데이터셋 설정
mart <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
library(biomaRt)
install.packages("cli")
library(topGO)
library(biomaRt)
install.packages("cli")
install.packages("cli")
### Perform DE analysis
### reference : https://satijalab.org/seurat/articles/de_vignette.html
## input file : annotation_object.rds
## output file : heatmap.png, neuro.csv, volcanoplot.png
# load package
library(DESeq2)
library(Seurat)
library(SeuratData)
library(EnhancedVolcano)
library(dplyr)
library(tidyverse)
library(ComplexHeatmap)
library(circlize)
# load data
plus <- readRDS("annotation_object")
new.cluster.ids <- c("Immature neurons", "Myofibroblasts", "Fibroblasts", "Unknown",
"Fibroblasts", "Glutamatergic neurons",
"GABAergic neurons")
names(new.cluster.ids) <- levels(plus)
# load data
getwd()
plus <- readRDS("D:/seodojin/Rworld/annotation_object.rds")
plus <- readRDS("D:/seodojin/Rworld/annotation_object")
new.cluster.ids <- c("Immature neurons", "Myofibroblasts", "Fibroblasts", "Unknown",
"Fibroblasts", "Glutamatergic neurons",
"GABAergic neurons")
names(new.cluster.ids) <- levels(plus)
plus <- RenameIdents(plus, new.cluster.ids)
# find markers for every cluster compared to all remaining cells
plus.markers <- FindAllMarkers(plus, only.pos = F, min.pct = 0.25, logfc.threshold = 0.25)
library(Seurat)
install.packages("vctrs")
install.packages("vctrs")
# find markers for every cluster compared to all remaining cells
plus.markers <- FindAllMarkers(plus, only.pos = F, min.pct = 0.25, logfc.threshold = 0.25)
git add DE_analysis.R
library(usethis)
git_sitrep()
getwd()
library(usethis)
use_git()
